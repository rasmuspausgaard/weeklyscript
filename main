#!/usr/bin/env nextflow

nextflow.enable.dsl=2

params.runFolder = '/data/NGSruns/NovaSeq/2024'
params.samplesheet = '/data/NGSruns/NovaSeq/2024/Samplesheet'
params.cramFolder = '/lnx01_data2/shared/dataArchive/lnx02/alignedData/hg38/novaRuns/2024/'
params.fastFolder = '/lnx01_data2/shared/dataArchive/lnx02/fastgStorage/novaRuns'

params.currentDay = new Date().format('yyMMdd') // Default to today's date

process CheckFolder {
    input:
    path novasti
    val currentday

    output:
    env found_folder  

    script:
    """
    # Convert to absolute path
    novasti=\$(realpath "$novasti")

    echo "Checking directories in: \$novasti for a folder starting with the date: $currentday"
    found_folder=""  # Initialize the variable to hold the path of the found folder

    while true; do
        new_folder_found=false

        for folder in \$novasti/*; do
            if [ -d "\$folder" ]; then
                folder_name=\$(basename "\$folder")
                folder_date="\${folder_name:0:6}"
                
                if [[ "\$folder_date" == "$currentday" ]]; then
                    echo "Found matching folder: \$folder"
                    found_folder="\$folder"  # Store the full path of the found folder
                    new_folder_found=true
                    break
                fi
            fi
        done

        if [ "\$new_folder_found" = true ]; then
            echo \$found_folder  # Output the found folder path to Nextflow
            break
        else
            echo "No folder found matching the date: $currentday. Checking again in 30 minutes..."
            sleep 1800
        fi
    done
    """
}




process CheckSheet {
    input:
    path samplesheet
    val currentday

    output:
    env found_sheet  // Emit the sheet path directly as a value

    script:
    """
    echo "Checking directories in: $samplesheet for a folder starting with the date: $currentday"
    found_sheet=""  # Initialize the variable to hold the path of the found samplesheet

    while true; do
        new_samplesheet_found=false

        for file in "$samplesheet"/*; do
            if [ -f "\$file" ]; then
                file_name=\$(basename "\$file")
                file_date="\${file_name:0:6}"
                
                if [[ "\$file_date" == "$currentday" ]]; then
                    echo "Found matching samplesheet: \$file"
                    found_sheet=\$(realpath "\$file")  # Get the absolute path of the file
                    new_samplesheet_found=true
                    break
                fi
            fi
        done

        if [ "\$new_samplesheet_found" = true ]; then
            echo \$found_sheet  # Output the found samplesheet path to Nextflow
            break
        else
            echo "No samplesheet found matching the date: $currentday. Checking again in 30 minutes..."
            sleep 1800
        fi
    done
    """
}


process CheckCopyComplete {

    input:
    path sti

    script:
    """
    echo "Monitoring for 'CopyComplete.txt' in the directory: $sti"
    while true; do
        if [ -f "${sti}/CopyComplete.txt" ]; then
            echo "'CopyComplete.txt' found in $sti"
            break  # Exit the loop if file is found
        else
            echo "'CopyComplete.txt' not found in $sti. Checking again in 15 minutes..."
            sleep 900  # Sleep for 15 minutes before rechecking
        fi
    done
    """
}

process DNAandRNAflags {
    input:
    path samplesheet

    output:
    env DNA_FLAG, optional: true, emit: DNA_chan
    env RNA_FLAG, optional: true, emit: RNA_chan

    shell:
    """
    if grep -q "RV1" "$samplesheet"; then
        RNA_FLAG="--RNA"
    else
        RNA_FLAG=""
    fi

    if grep -Eq "AV1|WG4" "$samplesheet"; then
        DNA_FLAG="--DNA"
    else
        DNA_FLAG=""
    fi
    """
}



/*process LaunchDemultiplex {
    input:
    path folder
    path samplesheet
    val DNA_FLAG 
    val RNA_FLAG

    script:
    """
    gnome-terminal -- bash -c "source ~/.bashrc; nextflow run KGVejle/demultiplex -r main --runfolder "${folder}" --samplesheet "${samplesheet}" ${DNA_FLAG} ${RNA_FLAG} --keepwork"
    """

}

*/


/*process MV1_samples {

    input:
    path fastq
    path samplesheet
    val currentday

    script:
    """
    # Prepare the date-specific path in the fastq directory
    date_folder_path=\$(find $fastq -type d -name "*$currentday*" -print -quit)

    # Check if the date-specific folder exists and proceed
    if [[ -z "$date_folder_path" ]]; then
        echo "No directory found for the specified date: $currentday"
        exit 0
    else
        echo "Checking in directory: $date_folder_path"
    fi

    # Extract samples with 'MV1' in their names from the samplesheet
    grep -E 'MV1' $samplesheet > mv1_samples.txt
    mv1_sample_count=\$(cat mv1_samples.txt | wc -l)

    if [ "$mv1_sample_count" -eq 0 ]; then
        echo "No MV1 samples found in the samplesheet."
        exit 0
    fi

    echo "Found MV1 samples: $mv1_sample_count"
    cat mv1_samples.txt

    # Initialize the count of found files
    all_found=false
    while ! $all_found; do
        found_count=0
        while IFS= read -r line; do
            sample_id=\$(echo "$line" | cut -f1)  # Assuming the first column is the sample ID
            # Check if corresponding fastq files are present
            if ls $date_folder_path/*"$sample_id"*R1*.fastq.gz 2>/dev/null; then
                ((found_count++))
            fi
        done < mv1_samples.txt

        echo "Progress: Found $found_count out of $mv1_sample_count MV1 sample fastq files."

        if [[ "$found_count" -eq "$mv1_sample_count" ]]; then
            all_found=true
            echo "All required MV1 sample fastq files found."
        else
            echo "Not all MV1 sample fastq files found. Checking again in 15 minutes..."
            sleep 900  # Sleep for 15 minutes
        fi
    done
    
    gnome-terminal -- bash -c 'echo "Hello MV1"; exec bash'
    """
}
*/


process Fastqfolder {
    input:
    path fastq
    val currentday

    output:
    env found_fastq_folder

    script:
    """
    echo "FASTQ directory: $fastq"
    echo "Current day value: $currentday"

    # Initialize the found folder variable
    found_fastq_folder=""

    # Loop until the folder is found or the process is terminated
    while true; do
        new_folder_found=false
        
        # Check all directories that start with the current day in the FASTQ directory
        for dir in "$fastq"/$currentday*; do
            if [ -d "\$dir" ]; then
                echo "Found matching folder: \$dir"
                found_fastq_folder=\$(realpath "\$dir")
                new_folder_found=true
                break
            fi
        done

        if [ "\$new_folder_found" = true ]; then
            echo "Checking in directory: \$found_fastq_folder"
            break
        else
            echo "No directory found matching the date: $currentday. Checking again in 30 minutes..."
            sleep 1800
        fi
    done

    """
}

process Cramfolder {
    input:
    path cram
    val currentday

    output:
    env found_cram_folder

    script:
    """
    echo "CRAM directory: $cram"
    echo "Current day value: $currentday"

    # Initialize the found folder variable
    found_cram_folder=""

    # Loop until the folder is found or the process is terminated
    while true; do
        new_folder_found=false
        
        # Check all directories that start with the current day in the CRAM directory
        for dir in "$cram"/$currentday*; do
            if [ -d "\$dir" ]; then
                echo "Found matching folder: \$dir"
                found_cram_folder=\$(realpath "\$dir")
                new_folder_found=true
                break
            fi
        done

        if [ "\$new_folder_found" = true ]; then
            echo "Checking in directory: \$found_cram_folder"
            break
        else
            echo "No directory found matching the date: $currentday. Checking again in 30 minutes..."
            sleep 1800
        fi
    done

    """
}

process AV1_samples {
    input:
    path cram_folder
    path samplesheet

    output:
    path av1_samples.txt
    
    shell:
    """
    echo "$cram_folder"
    # Extract samples with 'AV1' in their names from the samplesheet
    grep -E 'AV1' "$samplesheet" > av1_samples.txt
    av1_sample_count=\$(cat av1_samples.txt | wc -l)

    if [ "\$av1_sample_count" -eq 0 ]; then
        echo "No AV1 samples found in the samplesheet."
        exit 1
    else
        echo "Found AV1 samples: \$av1_sample_count"
        cat av1_samples.txt
    fi
    """
}




//process CNV_samples {}
//process NGC_samples {}
//process EV8_Alm_Onk {}

workflow {
    nova_chan = Channel.fromPath(params.runFolder)
    samplesheet_chan = Channel.fromPath(params.samplesheet)
    currentday_chan = Channel.value(params.currentDay)

    CheckFolder(nova_chan, currentday_chan)
    CheckSheet(samplesheet_chan, currentday_chan)

    CheckCopyComplete(CheckFolder.out)

    DNAandRNAflags(CheckSheet.out)

    //LaunchDemultiplex(CheckFolder.out, CheckSheet.out, DNAandRNAflags.out.DNA_chan.ifEmpty(" "), DNAandRNAflags.out.RNA_chan.ifEmpty(" "))



    fastq_chan = Channel.fromPath(params.fastFolder)
    cram_chan = Channel.fromPath(params.cramFolder)

    Fastqfolder(fastq_chan, currentday_chan)
    Cramfolder(cram_chan, currentday_chan)

    //MV1_samples(Fastqfolder.out, samplesheet_chan)
    AV1_samples(Cramfolder.out, samplesheet_chan)
    //CNV_samples(Cramfolder.out, samplesheet_chan)
    //NGC_samples(Cramfolder.out, samplesheet_chan)
    //EV8_Alm_Onk(Cramfolder.out, samplesheet_chan)
}
